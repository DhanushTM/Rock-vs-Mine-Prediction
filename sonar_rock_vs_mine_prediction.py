# -*- coding: utf-8 -*-
"""Sonar_Rock_VS_Mine_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WYfo_dVMcCq6kW4Npo5q8v1Uk-0ZShnO

Importing Dependicies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

#loading the data set to pandas DataFrame
sonar_data =pd.read_csv('/content/sonar data.csv', header=None)

sonar_data.head()

#number of rows and columns
sonar_data.shape

sonar_data.describe()
#describe gives statistical measures of data

sonar_data[60].value_counts()

# M --> Mine
#R --> Rock

sonar_data.groupby(60).mean()

# separating data and label
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

# Training and test data

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

# Model Training --> LogisticRegression

model = LogisticRegression()

#trainig the logistic regression model using training data

print(X_train)

print(Y_train)

model.fit(X_train, Y_train)

# model evaluation

# accuracy on the training data

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy on training data:",training_data_accuracy)

# accuracy on the testing data

X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy on test data :",testing_data_accuracy)

# Making a predictive system

# changing the input data into numpy array
input_data = (0.0283,0.0599,0.0656,0.0229,0.0839,0.1673,0.1154,0.1098,0.1370,0.1767,0.1995,0.2869,0.3275,0.3769,0.4169,0.5036,0.6180,0.8025,0.9333,0.9399,0.9275,0.9450,0.8328,0.7773,0.7007,0.6154,0.5810,0.4454,0.3707,0.2891,0.2185,0.1711,0.3578,0.3947,0.2867,0.2401,0.3619,0.3314,0.3763,0.4767,0.4059,0.3661,0.2320,0.1450,0.1017,0.1111,0.0655,0.0271,0.0244,0.0179,0.0109,0.0147,0.0170,0.0158,0.0046,0.0073,0.0054,0.0033,0.0045,0.0079)
input_data_as_numpy_array = np.array(input_data)

#reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

print(prediction)

if prediction[0]=='R':
  print("The object is a Rock!")
else:
  print("The object is a Mine!")

